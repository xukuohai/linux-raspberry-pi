From 33514623a515c461119de258f1e385c8491e9606 Mon Sep 17 00:00:00 2001
From: Frank van der Linden <fllinden@amazon.com>
Date: Tue, 12 Feb 2019 18:22:43 +0000
Subject: net: ena: replace dma_zalloc_coherent with dma_alloc_coherent

Commit dfd32cad146e3624970eee9329e99d2c6ef751b3 removed
dma_zalloc_coherent, instead making sure that dma_alloc_coherent
returns zeroed memory. So, replace all calls to dma_zalloc_coherent
in the ena driver with dma_alloc_coherent.
---
 drivers/amazon/net/ena/ena_com.c | 28 ++++++++++++++--------------
 1 file changed, 14 insertions(+), 14 deletions(-)

diff --git a/drivers/amazon/net/ena/ena_com.c b/drivers/amazon/net/ena/ena_com.c
index 51847d279706..0c6baa03cfba 100644
--- a/drivers/amazon/net/ena/ena_com.c
+++ b/drivers/amazon/net/ena/ena_com.c
@@ -111,7 +111,7 @@ static int ena_com_admin_init_sq(struct ena_com_admin_queue *queue)
 	struct ena_com_admin_sq *sq = &queue->sq;
 	u16 size = ADMIN_SQ_SIZE(queue->q_depth);
 
-	sq->entries = dma_zalloc_coherent(queue->q_dmadev, size, &sq->dma_addr,
+	sq->entries = dma_alloc_coherent(queue->q_dmadev, size, &sq->dma_addr,
 					  GFP_KERNEL);
 
 	if (!sq->entries) {
@@ -133,7 +133,7 @@ static int ena_com_admin_init_cq(struct ena_com_admin_queue *queue)
 	struct ena_com_admin_cq *cq = &queue->cq;
 	u16 size = ADMIN_CQ_SIZE(queue->q_depth);
 
-	cq->entries = dma_zalloc_coherent(queue->q_dmadev, size, &cq->dma_addr,
+	cq->entries = dma_alloc_coherent(queue->q_dmadev, size, &cq->dma_addr,
 					  GFP_KERNEL);
 
 	if (!cq->entries) {
@@ -156,7 +156,7 @@ static int ena_com_admin_init_aenq(struct ena_com_dev *dev,
 
 	dev->aenq.q_depth = ENA_ASYNC_QUEUE_DEPTH;
 	size = ADMIN_AENQ_SIZE(ENA_ASYNC_QUEUE_DEPTH);
-	aenq->entries = dma_zalloc_coherent(dev->dmadev, size, &aenq->dma_addr,
+	aenq->entries = dma_alloc_coherent(dev->dmadev, size, &aenq->dma_addr,
 					    GFP_KERNEL);
 
 	if (!aenq->entries) {
@@ -345,13 +345,13 @@ static int ena_com_init_io_sq(struct ena_com_dev *ena_dev,
 		dev_node = dev_to_node(ena_dev->dmadev);
 		set_dev_node(ena_dev->dmadev, ctx->numa_node);
 		io_sq->desc_addr.virt_addr =
-			dma_zalloc_coherent(ena_dev->dmadev, size,
+			dma_alloc_coherent(ena_dev->dmadev, size,
 					    &io_sq->desc_addr.phys_addr,
 					    GFP_KERNEL);
 		set_dev_node(ena_dev->dmadev, dev_node);
 		if (!io_sq->desc_addr.virt_addr) {
 			io_sq->desc_addr.virt_addr =
-				dma_zalloc_coherent(ena_dev->dmadev, size,
+				dma_alloc_coherent(ena_dev->dmadev, size,
 						    &io_sq->desc_addr.phys_addr,
 						    GFP_KERNEL);
 		}
@@ -431,12 +431,12 @@ static int ena_com_init_io_cq(struct ena_com_dev *ena_dev,
 	prev_node = dev_to_node(ena_dev->dmadev);
 	set_dev_node(ena_dev->dmadev, ctx->numa_node);
 	io_cq->cdesc_addr.virt_addr =
-		dma_zalloc_coherent(ena_dev->dmadev, size,
+		dma_alloc_coherent(ena_dev->dmadev, size,
 				    &io_cq->cdesc_addr.phys_addr, GFP_KERNEL);
 	set_dev_node(ena_dev->dmadev, prev_node);
 	if (!io_cq->cdesc_addr.virt_addr) {
 		io_cq->cdesc_addr.virt_addr =
-			dma_zalloc_coherent(ena_dev->dmadev, size,
+			dma_alloc_coherent(ena_dev->dmadev, size,
 					    &io_cq->cdesc_addr.phys_addr,
 					    GFP_KERNEL);
 	}
@@ -1037,7 +1037,7 @@ static int ena_com_hash_key_allocate(struct ena_com_dev *ena_dev)
 	struct ena_rss *rss = &ena_dev->rss;
 
 	rss->hash_key =
-		dma_zalloc_coherent(ena_dev->dmadev, sizeof(*rss->hash_key),
+		dma_alloc_coherent(ena_dev->dmadev, sizeof(*rss->hash_key),
 				    &rss->hash_key_dma_addr, GFP_KERNEL);
 
 	if (unlikely(!rss->hash_key))
@@ -1061,7 +1061,7 @@ static int ena_com_hash_ctrl_init(struct ena_com_dev *ena_dev)
 	struct ena_rss *rss = &ena_dev->rss;
 
 	rss->hash_ctrl =
-		dma_zalloc_coherent(ena_dev->dmadev, sizeof(*rss->hash_ctrl),
+		dma_alloc_coherent(ena_dev->dmadev, sizeof(*rss->hash_ctrl),
 				    &rss->hash_ctrl_dma_addr, GFP_KERNEL);
 
 	if (unlikely(!rss->hash_ctrl))
@@ -1105,7 +1105,7 @@ static int ena_com_indirect_table_allocate(struct ena_com_dev *ena_dev,
 		sizeof(struct ena_admin_rss_ind_table_entry);
 
 	rss->rss_ind_tbl =
-		dma_zalloc_coherent(ena_dev->dmadev, tbl_size,
+		dma_alloc_coherent(ena_dev->dmadev, tbl_size,
 				    &rss->rss_ind_tbl_dma_addr, GFP_KERNEL);
 	if (unlikely(!rss->rss_ind_tbl))
 		goto mem_err1;
@@ -1660,7 +1660,7 @@ int ena_com_mmio_reg_read_request_init(struct ena_com_dev *ena_dev)
 
 	spin_lock_init(&mmio_read->lock);
 	mmio_read->read_resp =
-		dma_zalloc_coherent(ena_dev->dmadev,
+		dma_alloc_coherent(ena_dev->dmadev,
 				    sizeof(*mmio_read->read_resp),
 				    &mmio_read->read_resp_dma_addr, GFP_KERNEL);
 	if (unlikely(!mmio_read->read_resp))
@@ -1892,7 +1892,7 @@ int ena_com_extra_properties_strings_init(struct ena_com_dev *ena_dev)
 		ENA_ADMIN_EXTRA_PROPERTIES_STRING_LEN;
 
 	extra_properties_strings->virt_addr =
-		dma_zalloc_coherent(ena_dev->dmadev,
+		dma_alloc_coherent(ena_dev->dmadev,
 				    extra_properties_strings->size,
 				    &extra_properties_strings->dma_addr,
 				    GFP_KERNEL);
@@ -2717,7 +2717,7 @@ int ena_com_allocate_host_info(struct ena_com_dev *ena_dev)
 	struct ena_host_attribute *host_attr = &ena_dev->host_attr;
 
 	host_attr->host_info =
-		dma_zalloc_coherent(ena_dev->dmadev, SZ_4K,
+		dma_alloc_coherent(ena_dev->dmadev, SZ_4K,
 				    &host_attr->host_info_dma_addr, GFP_KERNEL);
 	if (unlikely(!host_attr->host_info))
 		return -ENOMEM;
@@ -2735,7 +2735,7 @@ int ena_com_allocate_debug_area(struct ena_com_dev *ena_dev,
 	struct ena_host_attribute *host_attr = &ena_dev->host_attr;
 
 	host_attr->debug_area_virt_addr =
-		dma_zalloc_coherent(ena_dev->dmadev, debug_area_size,
+		dma_alloc_coherent(ena_dev->dmadev, debug_area_size,
 				    &host_attr->debug_area_dma_addr, GFP_KERNEL);
 	if (unlikely(!host_attr->debug_area_virt_addr)) {
 		host_attr->debug_area_size = 0;
-- 
2.32.0

