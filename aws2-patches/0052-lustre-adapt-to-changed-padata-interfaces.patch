From 58e5a141057cfe3a0d1ee2033998b7f69c06d46c Mon Sep 17 00:00:00 2001
From: Frank van der Linden <fllinden@amazon.com>
Date: Sat, 12 Oct 2019 17:35:41 +0000
Subject: lustre: adapt to changed padata interfaces.

5.4 has changed padata interfaces, so adapt to them.

Linux commits:

b128a30409356df65f1a51cff3eb986cac8cfedc ("padata: allocate workqueue internally")
e6ce0e0807e90d38a2cefa524ac253d7a85c3f2f ("padata: make padata_do_parallel find alternate callback CPU")

Signed-off-by: Frank van der Linden <fllinden@amazon.com>
---
 drivers/staging/lustrefsx/config.h               |  3 +++
 .../libcfs/include/libcfs/libcfs_ptask.h         |  2 ++
 .../lustrefsx/libcfs/libcfs/libcfs_ptask.c       | 16 ++++++++++++++++
 3 files changed, 21 insertions(+)

diff --git a/drivers/staging/lustrefsx/config.h b/drivers/staging/lustrefsx/config.h
index 409cdebc7143..d5cf2879b0d9 100644
--- a/drivers/staging/lustrefsx/config.h
+++ b/drivers/staging/lustrefsx/config.h
@@ -901,6 +901,9 @@
 /* Common stacktrace infrastructure exists */
 #define HAVE_COMMON_STACKTRACE 1
 
+/* changed padata interface in 5.4 */
+#define HAVE_PADATA_INTERFACE_54
+
 /* ext4_journal_start takes 3 arguments */
 /* #undef JOURNAL_START_HAS_3ARGS */
 
diff --git a/drivers/staging/lustrefsx/libcfs/include/libcfs/libcfs_ptask.h b/drivers/staging/lustrefsx/libcfs/include/libcfs/libcfs_ptask.h
index be78b503d651..586a04446cae 100644
--- a/drivers/staging/lustrefsx/libcfs/include/libcfs/libcfs_ptask.h
+++ b/drivers/staging/lustrefsx/libcfs/include/libcfs/libcfs_ptask.h
@@ -25,7 +25,9 @@ struct padata_instance {};
 
 struct cfs_ptask_engine {
 	struct padata_instance	*pte_pinst;
+#ifndef HAVE_PADATA_INTERFACE_54
 	struct workqueue_struct	*pte_wq;
+#endif
 	struct notifier_block	 pte_notifier;
 	int			 pte_weight;
 };
diff --git a/drivers/staging/lustrefsx/libcfs/libcfs/libcfs_ptask.c b/drivers/staging/lustrefsx/libcfs/libcfs/libcfs_ptask.c
index 275c01b74ad4..1b7603cade8a 100644
--- a/drivers/staging/lustrefsx/libcfs/libcfs/libcfs_ptask.c
+++ b/drivers/staging/lustrefsx/libcfs/libcfs/libcfs_ptask.c
@@ -137,7 +137,11 @@ static int cfs_do_parallel(struct cfs_ptask_engine *engine,
 	ptask->pt_result = -EINPROGRESS;
 
 retry:
+#ifdef HAVE_PADATA_INTERFACE_54
+	rc = padata_do_parallel(engine->pte_pinst, padata, &ptask->pt_cbcpu);
+#else
 	rc = padata_do_parallel(engine->pte_pinst, padata, ptask->pt_cbcpu);
+#endif
 	if (rc == -EBUSY && cfs_ptask_is_retry(ptask)) {
 		/* too many tasks already in queue */
 		schedule_timeout_uninterruptible(1);
@@ -326,14 +330,18 @@ static int cfs_ptengine_padata_init(struct cfs_ptask_engine *engine,
 {
 	cpumask_var_t all_mask;
 	cpumask_var_t par_mask;
+#ifndef HAVE_PADATA_INTERFACE_54
 	unsigned int wq_flags = WQ_MEM_RECLAIM | WQ_CPU_INTENSIVE;
+#endif
 	int rc;
 
 	get_online_cpus();
 
+#ifndef HAVE_PADATA_INTERFACE_54
 	engine->pte_wq = alloc_workqueue(name, wq_flags, 1);
 	if (engine->pte_wq == NULL)
 		GOTO(err, rc = -ENOMEM);
+#endif
 
 	if (!alloc_cpumask_var(&all_mask, GFP_KERNEL))
 		GOTO(err_destroy_workqueue, rc = -ENOMEM);
@@ -384,7 +392,11 @@ static int cfs_ptengine_padata_init(struct cfs_ptask_engine *engine,
 	}
 
 	engine->pte_weight = cpumask_weight(par_mask);
+#ifdef HAVE_PADATA_INTERFACE_54
+	engine->pte_pinst  = padata_alloc_possible(name);
+#else
 	engine->pte_pinst  = padata_alloc_possible(engine->pte_wq);
+#endif
 	if (engine->pte_pinst == NULL)
 		GOTO(err_free_par_mask, rc = -ENOMEM);
 
@@ -418,8 +430,10 @@ static int cfs_ptengine_padata_init(struct cfs_ptask_engine *engine,
 err_free_all_mask:
 	free_cpumask_var(all_mask);
 err_destroy_workqueue:
+#ifndef HAVE_PADATA_INTERFACE_54
 	destroy_workqueue(engine->pte_wq);
 err:
+#endif
 	put_online_cpus();
 	return rc;
 }
@@ -430,7 +444,9 @@ static void cfs_ptengine_padata_fini(struct cfs_ptask_engine *engine)
 	padata_unregister_cpumask_notifier(engine->pte_pinst,
 					   &engine->pte_notifier);
 	padata_free(engine->pte_pinst);
+#ifndef HAVE_PADATA_INTERFACE_54
 	destroy_workqueue(engine->pte_wq);
+#endif
 }
 
 #else  /* !CONFIG_PADATA */
-- 
2.32.0

