From ee366f26f305427c0d4fa0161f50c1b894eacbe0 Mon Sep 17 00:00:00 2001
From: SeongJae Park <sjpark@amazon.de>
Date: Tue, 23 Nov 2021 14:02:14 +0000
Subject: Revert "mm/damon/core: account age of target regions"

This reverts commit 04f41aaafacccec036973195a0dcefb4d55fbe77.
---
 include/linux/damon.h | 10 ----------
 mm/damon/core.c       | 13 -------------
 2 files changed, 23 deletions(-)

diff --git a/include/linux/damon.h b/include/linux/damon.h
index 3e8215debbd4..755d70804705 100644
--- a/include/linux/damon.h
+++ b/include/linux/damon.h
@@ -31,22 +31,12 @@ struct damon_addr_range {
  * @sampling_addr:	Address of the sample for the next access check.
  * @nr_accesses:	Access frequency of this region.
  * @list:		List head for siblings.
- * @age:		Age of this region.
- *
- * @age is initially zero, increased for each aggregation interval, and reset
- * to zero again if the access frequency is significantly changed.  If two
- * regions are merged into a new region, both @nr_accesses and @age of the new
- * region are set as region size-weighted average of those of the two regions.
  */
 struct damon_region {
 	struct damon_addr_range ar;
 	unsigned long sampling_addr;
 	unsigned int nr_accesses;
 	struct list_head list;
-
-	unsigned int age;
-/* private: Internal value for age calculation. */
-	unsigned int last_nr_accesses;
 };
 
 /**
diff --git a/mm/damon/core.c b/mm/damon/core.c
index 68f7a4240f41..2bc20e78b961 100644
--- a/mm/damon/core.c
+++ b/mm/damon/core.c
@@ -40,9 +40,6 @@ struct damon_region *damon_new_region(unsigned long start, unsigned long end)
 	region->nr_accesses = 0;
 	INIT_LIST_HEAD(&region->list);
 
-	region->age = 0;
-	region->last_nr_accesses = 0;
-
 	return region;
 }
 
@@ -442,7 +439,6 @@ static void kdamond_reset_aggregated(struct damon_ctx *c)
 
 		damon_for_each_region(r, t) {
 			trace_damon_aggregated(t, r, damon_nr_regions(t));
-			r->last_nr_accesses = r->nr_accesses;
 			r->nr_accesses = 0;
 		}
 	}
@@ -460,7 +456,6 @@ static void damon_merge_two_regions(struct damon_target *t,
 
 	l->nr_accesses = (l->nr_accesses * sz_l + r->nr_accesses * sz_r) /
 			(sz_l + sz_r);
-	l->age = (l->age * sz_l + r->age * sz_r) / (sz_l + sz_r);
 	l->ar.end = r->ar.end;
 	damon_destroy_region(r, t);
 }
@@ -480,11 +475,6 @@ static void damon_merge_regions_of(struct damon_target *t, unsigned int thres,
 	struct damon_region *r, *prev = NULL, *next;
 
 	damon_for_each_region_safe(r, next, t) {
-		if (diff_of(r->nr_accesses, r->last_nr_accesses) > thres)
-			r->age = 0;
-		else
-			r->age++;
-
 		if (prev && prev->ar.end == r->ar.start &&
 		    diff_of(prev->nr_accesses, r->nr_accesses) <= thres &&
 		    sz_damon_region(prev) + sz_damon_region(r) <= sz_limit)
@@ -532,9 +522,6 @@ static void damon_split_region_at(struct damon_ctx *ctx,
 
 	r->ar.end = new->ar.start;
 
-	new->age = r->age;
-	new->last_nr_accesses = r->last_nr_accesses;
-
 	damon_insert_region(new, r, damon_next_region(r), t);
 }
 
-- 
2.32.0

