From d49a66d91502bcf46c7be3afaddf8f59b5a10dc5 Mon Sep 17 00:00:00 2001
From: Frank van der Linden <fllinden@amazon.com>
Date: Wed, 3 Apr 2019 15:40:50 +0000
Subject: lustre: fix ACL handling

This patch comes from Lustre 2.12 and is needed to behave
properly when using Lustre 2.10 and a recent kernel like 4.14.

Fix errors like:

  $ getfacl my-file
  getfacl: my-file: Invalid argument

The original patch is:

    LU-10785 llite: use xattr_handler name for ACLs

    If struct xattr_handler has a name member then use it (rather than
    prefix) for the ACL xattrs. This avoids a bug where ACL operations
    failed for some kernels.

    Signed-off-by: John L. Hammond <john.hammond@intel.com>
    Change-Id: I28f6c5dbe3cdc4155e93d388d2c413092e02c082
    Reviewed-on: https://review.whamcloud.com/31595

cr https://code.amazon.com/reviews/CR-4309162

Signed-off-by: Aurelien Degremont <degremoa@amazon.com>
Signed-off-by: Frank van der Linden <fllinden@amazon.com>
---
 drivers/staging/lustrefsx/config.h            |  3 ++
 .../staging/lustrefsx/lustre/llite/xattr.c    | 30 ++++++++++++++-----
 2 files changed, 26 insertions(+), 7 deletions(-)

diff --git a/drivers/staging/lustrefsx/config.h b/drivers/staging/lustrefsx/config.h
index 5e042baf49d7..79c23e3d239f 100644
--- a/drivers/staging/lustrefsx/config.h
+++ b/drivers/staging/lustrefsx/config.h
@@ -826,6 +826,9 @@
 /* Define to 1 if you have the <unistd.h> header file. */
 #define HAVE_UNISTD_H 1
 
+/* xattr_handler has a name member */
+#define HAVE_XATTR_HANDLER_NAME 1
+
 /* kernel has vfs_rename with 5 args */
 /* #undef HAVE_VFS_RENAME_5ARGS */
 
diff --git a/drivers/staging/lustrefsx/lustre/llite/xattr.c b/drivers/staging/lustrefsx/lustre/llite/xattr.c
index 67cc5139f736..e1e6e34dc0e0 100644
--- a/drivers/staging/lustrefsx/lustre/llite/xattr.c
+++ b/drivers/staging/lustrefsx/lustre/llite/xattr.c
@@ -45,17 +45,25 @@
 
 #include "llite_internal.h"
 
+#ifndef HAVE_XATTR_HANDLER_NAME
+static inline const char *xattr_prefix(const struct xattr_handler *handler)
+{
+	return handler->prefix;
+}
+#endif
+
 const struct xattr_handler *get_xattr_type(const char *name)
 {
-	int i = 0;
+	int i;
 
-	while (ll_xattr_handlers[i]) {
-		size_t len = strlen(ll_xattr_handlers[i]->prefix);
+	for (i = 0; ll_xattr_handlers[i]; i++) {
+		const char *prefix = xattr_prefix(ll_xattr_handlers[i]);
+		size_t prefix_len = strlen(prefix);
 
-		if (!strncmp(ll_xattr_handlers[i]->prefix, name, len))
+		if (!strncmp(prefix, name, prefix_len))
 			return ll_xattr_handlers[i];
-		i++;
 	}
+
 	return NULL;
 }
 
@@ -141,7 +149,7 @@ static int ll_xattr_set_common(const struct xattr_handler *handler,
 			RETURN(-EPERM);
 	}
 
-	fullname = kasprintf(GFP_KERNEL, "%s%s", handler->prefix, name);
+	fullname = kasprintf(GFP_KERNEL, "%s%s", xattr_prefix(handler), name);
 	if (!fullname)
 		RETURN(-ENOMEM);
 
@@ -451,7 +459,7 @@ static int ll_xattr_get_common(const struct xattr_handler *handler,
 		RETURN(-ENODATA);
 #endif
 
-	fullname = kasprintf(GFP_KERNEL, "%s%s", handler->prefix, name);
+	fullname = kasprintf(GFP_KERNEL, "%s%s", xattr_prefix(handler), name);
 	if (!fullname)
 		RETURN(-ENOMEM);
 
@@ -762,7 +770,11 @@ static const struct xattr_handler ll_security_xattr_handler = {
 };
 
 static const struct xattr_handler ll_acl_access_xattr_handler = {
+#ifdef HAVE_XATTR_HANDLER_NAME
+	.name = XATTR_NAME_POSIX_ACL_ACCESS,
+#else
 	.prefix = XATTR_NAME_POSIX_ACL_ACCESS,
+#endif
 	.flags = XATTR_ACL_ACCESS_T,
 #if defined(HAVE_XATTR_HANDLER_SIMPLIFIED)
 	.get = ll_xattr_get_common_4_3,
@@ -777,7 +789,11 @@ static const struct xattr_handler ll_acl_access_xattr_handler = {
 };
 
 static const struct xattr_handler ll_acl_default_xattr_handler = {
+#ifdef HAVE_XATTR_HANDLER_NAME
+	.name = XATTR_NAME_POSIX_ACL_DEFAULT,
+#else
 	.prefix = XATTR_NAME_POSIX_ACL_DEFAULT,
+#endif
 	.flags = XATTR_ACL_DEFAULT_T,
 #if defined(HAVE_XATTR_HANDLER_SIMPLIFIED)
 	.get = ll_xattr_get_common_4_3,
-- 
2.32.0

